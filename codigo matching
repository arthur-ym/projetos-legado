--QUERY 2
-- GERA BASE PARTICIPANTE NO MES SELECIONADO 
-- É NECESSARIO TER UMA BASE DE PESSOAS PARTICIPANTES NO FORMATO CERTO PARA FAZER OS JOINS ENTRE AS TABELAS 
-- VER QUAL PRODUTO QUERO ANALISAR
drop table if exists dbdl_sbox_business_analytics.aym_df_dentro purge;
CREATE TABLE dbdl_sbox_business_analytics.aym_df_dentro AS 
select a.numerocartao_sha2
      ,concat(a.variante ,"|",a.produto_descricao,"|" ,a.emissor ,"|", cast(a.ano*100+a.mes as string)) as chave
      ,sum(a.fat_m1 ) as fat_m_1           
      ,sum(a.fat_m2 ) as fat_m_2           
      ,sum(a.fat_m3 ) as fat_m_3           
      ,sum(a.qtd_m1 ) as qtd_transacoes_m_1 
      ,sum(a.qtd_m2 ) as qtd_transacoes_m_2 
      ,sum(a.qtd_m3 ) as qtd_transacoes_m_3
      ,sum(a.fat_m1 +a.fat_m2+a.fat_m3)/3 as media
      ,1 as flag_evento
from ba.cubo_direx_segmento  as a
inner join ba.avaliacao_campanhas_portadores as b --MUDAR BASE DE CARTOES TODA VEZ QUE RODAR
    on a.numerocartao_sha2 = b.numerocartao_sha2 --O LAYOUT CORRETO DE BASE TEM Q TER OS CAMPOS DOS JOINS
    and a.ano = cast(b.ano_safra as int) 
    and a.mes = cast(b.mes_safra as int)
    and a.produto_descricao = b.produto_descricao 
where 
b.campanha in (${CAMPANHA_REPLACE}) and b.identificacao=${IDENTIFICACAO}
a.ano*100 + a.mes between ${ANO_MES_SAFRA_INICIAL} and ${ANO_MES_SAFRA_FINAL} and a.produto in (${PRODUTOS}) --('credito', 'debito' ) 
and length(a.numerocartao_sha2)=64 --IMPORTANTE TIRAR OS CARTOES QUE VEM EM BRANCO, SENAO DA PAU DEPOIS
and (a.fat_m1 + a.fat_m2 + a.fat_m3) > 3 --FILTRO PARA TIRAR OS CARTOES SEM HISTORICO 
group by 1,2;

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

--QUERY 3 
--GERA BASE DE POSSIVEIS CONTROLES NO MES SELECIONADO
--UTILIZAR MESMAS REGRAS QUE A QUERY DE CIMA
drop table if exists dbdl_sbox_business_analytics.aym_df_FORA purge;
CREATE TABLE dbdl_sbox_business_analytics.aym_df_FORA AS 
with base as (
select a.numerocartao_sha2
      ,concat(a.variante ,"|",a.produto_descricao,"|" ,a.emissor ,"|", cast(a.ano*100+a.mes as string) ) as chave
      ,sum(a.fat_m1 ) as fat_m_1           
      ,sum(a.fat_m2 ) as fat_m_2           
      ,sum(a.fat_m3 ) as fat_m_3           
      ,sum(a.qtd_m1 ) as qtd_transacoes_m_1 
      ,sum(a.qtd_m2 ) as qtd_transacoes_m_2 
      ,sum(a.qtd_m3 ) as qtd_transacoes_m_3
      ,sum(a.fat_m1 +a.fat_m2+a.fat_m3)/3 as media
      ,0 as flag_evento
from ba.cubo_direx_segmento  as a
left join (select * from ba.avaliacao_campanhas_portadores where campanha in (${CAMPANHA_REPLACE}) )  as b --MUDAR BASE DE CARTOES
    on a.numerocartao_sha2 = b.numerocartao_sha2 
    and a.ano = cast(b.ano_safra as int) 
    and a.mes = cast(b.mes_safra as int)
    --and a.produto_descricao = b.produto_descricao 
where  
a.ano*100 + a.mes between ${ANO_MES_SAFRA_INICIAL} and ${ANO_MES_SAFRA_FINAL} 
--and a.produto in (${PRODUTOS}) --('credito', 'debito')
and b.numerocartao_sha2 is null
and (a.fat_m1 + a.fat_m2 + a.fat_m3) > 3 --MESMO FILTRO DE CARTOES SEM HISTORICO 
group by 1,2)
select * from base 

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
# A partir daqui é R
#Puxa os dados do cloudera

df_dentro <- sql(sqlContext, "select * from dbdl_sbox_business_analytics.aym_df_dentro")
df_fora   <- sql(sqlContext, "select * from dbdl_sbox_business_analytics.aym_df_FORA")

createOrReplaceTempView(df_dentro, "df_dentro")
createOrReplaceTempView(df_fora  , "df_fora"  )

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

#calcula os decis por variante, emissor, produto  
df_decil <- sql(sqlContext,"
select chave ,count(1) as n
      ,round(percentile(media, 0.1),2) as p10
      ,round(percentile(media, 0.2),2) as p20
      ,round(percentile(media, 0.3),2) as p30
      ,round(percentile(media, 0.4),2) as p40
      ,round(percentile(media, 0.5),2) as p50
      ,round(percentile(media, 0.6),2) as p60
      ,round(percentile(media, 0.7),2) as p70
      ,round(percentile(media, 0.8),2) as p80
      ,round(percentile(media, 0.9),2) as p90
from dbdl_sbox_business_analytics.aym_df_dentro
group by chave
order by chave
")
createOrReplaceTempView(df_decil, "df_decil")

showDF(df_decil,200, truncate =F)

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

# aplica os decis calculados em cada cartao para separar em grupos
# tenha fé no codigo
df_dentro2 <- sql("
select a.* , 
case 
    when b.n >  100 and media < (0   + p10)/2 then '01'
    when b.n > 1000 and media < (p10 + p20)/2 then '02'
    when b.n >  100 and media < (p20 + p30)/2 then '03'
    when b.n > 1000 and media < (p30 + p40)/2 then '04'
    when b.n >   10 and media < (p40 + p50)/2 then '05'
    when b.n > 1000 and media < (p50 + p60)/2 then '06'
    when b.n >  100 and media < (p60 + p70)/2 then '07'
    when b.n > 1000 and media < (p70 + p80)/2 then '08'
    when b.n >  100 and media < (p80 + p90)/2 then '09'
else '10'
end as decil
from df_dentro as a 
inner join df_decil as b on a.chave = b.chave
")

df_fora2 <- sql("
select a.* , 
case 
    when b.n >  100 and media < (0   + p10)/2 then '01'
    when b.n > 1000 and media < (p10 + p20)/2 then '02'
    when b.n >  100 and media < (p20 + p30)/2 then '03'
    when b.n > 1000 and media < (p30 + p40)/2 then '04'
    when b.n >   10 and media < (p40 + p50)/2 then '05'
    when b.n > 1000 and media < (p50 + p60)/2 then '06'
    when b.n >  100 and media < (p60 + p70)/2 then '07'
    when b.n > 1000 and media < (p70 + p80)/2 then '08'
    when b.n >  100 and media < (p80 + p90)/2 then '09'
else '10'
end as decil
from df_fora as a 
inner join df_decil as b on a.chave = b.chave")

createOrReplaceTempView(df_dentro2, "df_dentro2")
createOrReplaceTempView(df_fora2  , "df_fora2"  )


--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

saveAsTable( df_dentro2 , "dbdl_sbox_business_analytics.aym_df_dentro_v2" , mode ="overwrite" )
saveAsTable( df_fora2   , "dbdl_sbox_business_analytics.aym_df_fora_v2" , mode ="overwrite" )
showDF(df_fora2,200, truncate =F)

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

df_dentro2 <- sql(sqlContext, "select distinct * , concat(decil ,'|' ,chave) as decil_chave from dbdl_sbox_business_analytics.aym_df_dentro_v2")
df_fora2   <- sql(sqlContext, "select distinct * , concat(decil ,'|' ,chave) as decil_chave from dbdl_sbox_business_analytics.aym_df_fora_v2"  )

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

#faz o group by de chaves para rodar por lote
base_chave = collect(count( groupBy(df_dentro2, "decil_chave")))
base_chave = base_chave[order(-base_chave$count) , ]
row.names(base_chave) <- NULL
base_chave
#base_chave2=base_chave[base_chave$count > 100,]
#base_chave2

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

#Separa os CHAVE COM O BIN da amostra de df_fora


base_chave2 = collect(count( groupBy(df_fora2, "decil_chave") ))
base_chave2 = base_chave2[ order(-base_chave$count) , ]
row.names(base_chave) <- NULL
base_chave2

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

# função para um lote de chave 
library(MatchIt)

roda_mahalanobis = function( df_total ) {
    base_final = collect( df_total )
    rownames(base_final) = base_final$numerocartao_sha2
    
    m.out <- matchit(flag_evento ~ fat_m_1+fat_m_2+fat_m_3+qtd_transacoes_m_1+qtd_transacoes_m_2+qtd_transacoes_m_3, 
                        data = base_final, method = "nearest", distance = "mahalanobis", ratio=1, order="random", verbose=TRUE)
    pares<-m.out[["match.matrix"]]
    pares = data.frame( numerocartao_sha2 =  cbind(rownames(pares), par = data.frame(pares, row.names=NULL)) )
    names(pares) = c("numerocartao_sha2" , "par")
    
    df_pares_spark = createDataFrame(pares)
    return(df_pares_spark)
}

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
sql(sqlContext, "drop table if exists dbdl_sbox_business_analytics.aym_saida_match")

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
# -- 14min -> 47 interações
# -- 15min -> 20 interações
# -- 19min -> 60 interações
# -- Dependendo da base -> ate 1h+- 
# loop para cada CHAVE
for ( i in base_chave$decil_chave ) {
    #-------filtra o bin-------
    df_dentro_v2 = filter(df_dentro2 , paste("decil_chave =='" , i , "'" , sep ="") )
    df_fora_v2   = filter(df_fora2   , paste("decil_chave =='" , i , "'" , sep ="") )
    if( nrow(df_dentro_v2) > 1 & nrow(df_fora_v2) > 1){
        ##-------amostragem DENTRO-------
        p = min(1,  1000 / nrow(df_dentro_v2))
        df_dentro_v2 = sample( df_dentro_v2, withReplacement = F , p )
        ##-------amostragem FORA-------
        p = min(1, 20000 / nrow(df_fora_v2))
        df_fora_v2 = sample( df_fora_v2, withReplacement = F , p )
        #-------append-------
        df_total = rbind(df_dentro_v2, df_fora_v2)
        #-------faz o pares-------
        result = roda_mahalanobis( df_total )
        result$decil_chave = i    
        #-------salva embaixo------
        saveAsTable(result , "dbdl_sbox_business_analytics.aym_saida_match", mode ="append")
        }
    print(paste("rodou a chave", i))
    #-------limpa a memoria cache da maquina------
    rm(df_dentro_v2 , df_fora_v2 , result)
    gc()
}

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

--set hive.execution.engine=spark;
--drop table if exists dbdl_sbox_business_analytics.aym_base_controle;
CREATE TABLE dbdl_sbox_business_analytics.aym_base_controle as 
SELECT
numerocartao_sha2,
split(decil_chave, '\\|')[0] as decil,
split(decil_chave, '\\|')[1] as variante,
split(decil_chave, '\\|')[2] as produto,
split(decil_chave, '\\|')[3] as emissor,
split(decil_chave, '\\|')[4] as ano_mes,
cast(substr(split(decil_chave, '\\|')[4],1,4) as int) as ano,
cast(substr(split(decil_chave, '\\|')[4],5,5) as int) as mes,
1 as flag_promo
from dbdl_sbox_business_analytics.aym_saida_match a 
UNION all
SELECT
par as numerocartao_sha2,
split(decil_chave, '\\|')[0] as decil,
split(decil_chave, '\\|')[1] as variante,
split(decil_chave, '\\|')[2] as produto,
split(decil_chave, '\\|')[3] as emissor,
split(decil_chave, '\\|')[4] as ano_mes,
cast(substr(split(decil_chave, '\\|')[4],1,4) as int) as ano,
cast(substr(split(decil_chave, '\\|')[4],5,5) as int) as mes,
0 as flag_promo
from dbdl_sbox_business_analytics.aym_saida_match a 